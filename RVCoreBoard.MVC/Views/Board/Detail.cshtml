@using RVCoreBoard.MVC.Helpers;

@model RVCoreBoard.MVC.Models.Board
@{
    ViewData["Title"] = Model.Data.Title;
    var currentUser = ViewBag.User;
}
@section Scripts {
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }

<script>
        "use strict";
        var currentUser = @Html.Raw(Json.Serialize(currentUser));

        var connection = new signalR.HubConnectionBuilder().withUrl("/commentHub").build();

        connection.start().catch(err => console.error(err));

        connection.on("ReceiveCommentList", function () {
            GetCommentRealtime();
        });

        function GetCommentRealtime() {
            var objParam = {
                BNo:  @Html.Raw(Model.Data.BNo)
            };

            $.ajax({
                url: '/api/commentRealtime',
                method : 'post',
                datatype: 'json',
                data: objParams,
                success: function (commentList) {
                    SetCommnetList(commentList);
                }
            });
        }

        function SetCommentList(commentList) {
            $('#commentList ul').empty();

            $.each(commentList, function (index, comment) {
                SetCommnetAdd(comment);
            });
        }

        function SetCommnetAdd(comment) {
            var strCommentBtn = "";

            if (currentUser.id == comment.user.id) {
                strCommentBtn =
                    '       <div class="col-lg-12 mb-3 text-right">' +
                    '           <a class="btn btn-success text-white" name="commentModify">수정</a>' +
                    '           <a class="btn btn-danger text-white" name="commentDelete">삭제</a>' +
                    '       </div>';
            }

            var strCommentAdd =
                '<li id="comment' + comment.cNo + '">' +
                '   <div class="row">' +
                '       <div class="col-lg-3 mb-3">' +
                '           <span class="text-dark font-weight-bold cname">' + comment.user.name + '</span><br />' +
                '           <span class="text-dark cregdate">' + moment(comment.reg_Date).format('YYYY-MM-DD hh:mm') + '</span>' +
                '       </div>' +
                '       <div class="col-lg-9 mb-3">' +
                '           <sapn class="text-dark ccontent">' + comment.content + '</sapn>' +
                '       </div>' +
                strCommentBtn +
                '   </div>' +
                '</li>';

            if ($('#commentList ul li').length == 0) {
                $('#commentList').children('ul').append(strCommentAdd);
            } else {
                $('#commentList ul li').last().after(strCommentAdd);
            }
        }

        // 댓글 추가
        $("#commentSave").click(function () {
            var check = false;
            if (currentUser == null) {
                return false;
            }

            //널 검사
            if ($("#commentContent").val().trim() == "") {
                alert("내용을 입력하세요.");
                $("#commentContent").focus();
                return false;
            }

            var CContent = $("#commentContent").val().replace("\n", "<br>"); //개행처리

            //값 셋팅
            var objParams = {
                Gid: @Html.Raw(Model.Data.Gid),
                Id: @Html.Raw(Model.Data.Id),
                BNo: @Html.Raw(Model.Data.BNo),
                UNo: currentUser.uNo,
                Content: CContent,
            };

            var comment = null;

            //ajax 호출 (여기에 댓글을 저장하는 로직을 개발)
            $.ajax({
                url: "/api/commentAdd",
                dataType: "json",
                method: "post",
                async: false, //동기: false, 비동기: ture
                data: objParams,
                success: function (result) {
                    comment = result;
                    check = true;
                    alert("댓글이 등록되었습니다.");
                },
                error: function (request, status, error) {
                    console.log("AJAX_ERROR");
                }
            });

            if (check) {
                SetCommnetAdd(comment);

                $("#commentContent").val("");
            }
        });

        //댓글 삭제
        $(document).on("click", "a[name='commentDelete']", function () {

            var check = false;
            var CNo = $(this).parent().parent().parent().attr('id').replace('comment', '');

            //값 셋팅
            var objParams = {
                CNo: CNo
            };

            //ajax 호출
            $.ajax({
                url         :   "/api/commentDelete",
                dataType    :   "json",
                method      :   "post",
                async       :   false, //동기: false, 비동기: ture
                data        :   objParams,
                success: function (response) {
                    if (response.success) {
                        check = true;
                        alert(response.responseText);
                    } else {
                        alert(response.responseText);
                    }
                },
                error       :   function(request, status, error){
                    console.log("AJAX_ERROR");
                }
            });

            if (check) {
                $(this).parent().parent().parent().remove();
            }
        });

        //댓글 수정 입력
        $(document).on("click", "a[name='commentModify']", function () {

            var check = false;
            var CLiId = $(this).parent().parent().parent().attr('id');
            var CNo = $(this).parent().parent().parent().attr('id').replace("comment", "");
            var CName = $(this).parent().parent().parent().find('.cname').html().trim();
            var CContent = $(this).parent().parent().parent().find('.ccontent').html().trim();
            var CRegDate = $(this).parent().parent().parent().find('.cregdate').html().trim();

            if (currentUser == null) return false;

            if (CName != currentUser.name) {
                return false;
            } else {
                check = true;
            }

            if (check) {
                //입력받는 창 등록
                var commentEditor =
                    '<li id="' + CLiId + '">' +
                    '   <div class="row">' +
                    '       <div class="col-lg-3 mb-3">' +
                    '           <span class="text-dark font-weight-bold cname">' + CName + '</span>' +
                    '       </div>' +
                    '       <div class="col-lg-9 mb-3">' +
                    '           <textarea class="form-control" rows="5" id="commentModifyContent' + CNo+'">' + CContent + '</textarea>' +
                    '       </div>' +
                    '       <div class="text-right col-lg-12 text-right">' +
                    '           <a class="btn btn-primary text-white" name="commentModifySave">저장</a>' +
                    '           <a class="btn btn-dark text-white" name="commentModifyCancel" cRegDate="' + CRegDate + '" cContent="' + CContent + '"> 취소</a> ' +
                    '       </div>' +
                    '   </div>' +
                    '</li>';

                var prevLi = $(this).parent().parent().parent();
                //자기 위에 붙이기
                prevLi.after(commentEditor);
                //자기 자신 삭제
                $(this).parent().parent().parent().remove();
            }
        });

        //댓글 수정 취소
        $(document).on("click", "a[name='commentModifyCancel']", function () {
            //원래 데이터를 가져온다.
            var CLiId = $(this).parent().parent().parent().attr('id');
            var CName = $(this).parent().parent().parent().find('.cname').html().trim();
            var CContent = $(this).attr("cContent");
            var CRegDate = $(this).attr("cRegDate");

            if (currentUser == null) return false;

            if (CName !== currentUser.name) {
                return false;
            } else {
                check = true;
            }

            var strComment =
                '<li id="' + CLiId + '">' +
                '   <div class="row">'+
                '       <div class="col-lg-3 mb-3">' +
                '           <span class="text-dark font-weight-bold cname">' + CName +'</span><br />' +
                '           <span class="text-dark cregdate">' + CRegDate + '</span>' +
                '       </div>' +
                '       <div class="col-lg-9 mb-3">' +
                '           <sapn class="text-dark ccontent">' + CContent + '</sapn>' +
                '       </div>' +
                '       <div class="col-lg-12 mb-3 text-right">' +
                '           <a class="btn btn-success text-white" name="commentModify">수정</a>' +
                '           <a class="btn btn-danger text-white" name="commentDelete">삭제</a>' +
                '       </div>' +
                '   </div>' +
                '</li>';

            var prevLi = $(this).parent().parent().parent();
            //자기 위에 붙이기
            prevLi.after(strComment);

            //자기 자신 삭제
            $(this).parent().parent().parent().remove();
        });

        //댓글 수정 저장
        $(document).on("click", "a[name='commentModifySave']", function () {

            var check = false;
            var CNo = $(this).parent().parent().parent().attr('id').replace("comment", "");

            if (currentUser == null) return false;

            if ($("#commentModifyContent" + CNo) == "") {
                alert("내용을 입력하세요.");
                $("#commentModifyContent" + CNo).focus();
                return false;
            }

            var CContent = $("#commentModifyContent" + CNo).val().replace("\n", "<br>"); //개행처리

            //값 셋팅
            var objParams = {
                CNo: CNo,
                Gid: @Html.Raw(Model.Data.Gid),
                Id: @Html.Raw(Model.Data.Id),
                BNo: @Html.Raw(Model.Data.BNo),
                UNo: currentUser.uNo,
                Content: CContent
            };

            var comment = null;

            $.ajax({
                url         :   "/api/commentModify",
                dataType    :   "json",
                method      :   "post",
                async: false, //동기: false, 비동기: ture
                data : objParams,
                success     :   function(result){
                    comment = result;
                    check = true;
                    alert("댓글이 수정되었습니다.");
                },
                error       :   function(request, status, error){
                    console.log("AJAX_ERROR");
                }
            });

            if (check) {
                var strCommentBtn = null;

                if (currentUser != null) {
                    strCommentBtn =
                        '   <div class="col-lg-12 mb-3 text-right">' +
                        '       <a class="btn btn-success text-white" name="commentModify">수정</a>' +
                        '       <a class="btn btn-danger text-white" name="commentDelete">삭제</a>' +
                        '   </div>';
                }

                var strCommentAdd =
                    '<li id="comment' + comment.cNo + '">' +
                    '   <div class="row">'+
                    '       <div class="col-lg-3 mb-3">' +
                    '           <span class="text-dark font-weight-bold cname">' + comment.user.name + '</span><br />' +
                    '           <span class="text-dark cregdate">' + moment(comment.reg_Date).format('YYYY-MM-DD hh:mm') + '</span>' +
                    '       </div>' +
                    '       <div class="col-lg-9 mb-3">' +
                    '           <sapn class="text-dark ccontent">' + comment.content + '</sapn>' +
                    '       </div>' +
                    strCommentBtn +
                    '   </div>' +
                    '</li>';

                var prevLi = $(this).parent().parent().parent();
                //자기 위에 붙이기
                prevLi.after(strCommentAdd);

                //자기 자신 삭제
                $(this).parent().parent().parent().remove();
            }
        });
</script>
}
<div class="d-flex justify-content-center align-items-start position-relative">
    <div class="col-lg-9 card">
        <div class="card-body m-3">
            <div class="row">
                <div class="col-6 text-left mb-5">
                    <h1 class="card-title">@Model.Data.Title</h1>
                </div>
                <div class="col-6">
                    <div class="row text-right">
                        <div class="col-4">
                            <p><b>글쓴이 </b>@Model.Data.user.Name</p>
                        </div>
                        <div class="col-6">
                            <p><b>등록일시 </b>@Model.Data.Reg_Date.ToString("yyyy-MM-dd HH:mm")</p>
                        </div>
                        <div class="col-2">
                            <p><b>조회수 </b>@Model.Data.Cnt_Read</p>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-12 text-right">
                @*첨부파일 다운로드 구현*@
                @if (Model.Data.AttachInfoList.Count > 0)
                {
                    <div class="dropdown">
                        <button class="btn btn-facebook dropdown-toggle" type="button" data-toggle="dropdown">
                            첨부 파일
                            <span class="caret"></span>
                        </button>
                        <ul class="dropdown-menu dropdown-menu-right">
                            <li><a class="dropdown-item" asp-controller="api" asp-action="AllDownload" asp-route-id="@Model.Data.BNo">한꺼번에 받기</a></li>
                            <li class="dropdown-divider"></li>
                            @foreach (var attachInfo in Model.Data.AttachInfoList)
                            {
                                var fileName = attachInfo.FileFullName.Substring(attachInfo.FileFullName.IndexOf(".", attachInfo.FileFullName.LastIndexOf(@"\")) + 1);
                                <li><a class="dropdown-item" asp-controller="api" asp-action="Download" asp-route-id="@attachInfo.ANo">@fileName (@attachInfo.FileSize KB)</a></li>
                            }
                        </ul>
                    </div>
                }
            </div>
            <p class="card-text mb-5">@Html.Raw(Model.Data.Content)</p>
            <p class="text-dark font-weight-bold mt-5">댓글</p>
            @*댓글 구현*@
            <div id="commentArea">
                <div id="commentList">
                    <ul class="list-unstyled">
                        @foreach (var comment in Model.Data.CommentList)
                        {
                            var liId = "comment" + comment.CNo;
                            <li id="@liId">
                                <div class="row">
                                    <div class="col-lg-3 mb-3">
                                        <span class="text-dark font-weight-bold cname">@comment.user.Name</span><br />
                                        <span class="text-dark cregdate">@comment.Reg_Date.ToString("yyyy-MM-dd HH:mm")</span>
                                    </div>
                                    <div class="col-lg-9 mb-3">
                                        <sapn class="text-dark ccontent">@comment.Content</sapn>
                                    </div>
                                    @if (User.Identity.IsAuthenticated && (comment.user.UNo == User.Identity.GetSid()))
                                    {
                                        <div class="col-lg-12 mb-3 text-right">
                                            <a class="btn btn-success text-white" name="commentModify">수정</a>
                                            <a class="btn btn-danger text-white" name="commentDelete">삭제</a>
                                        </div>
                                    }
                                </div>
                            </li>
                        }
                    </ul>
                </div>
                <div id="commentInput">
                    @if (User.Identity.IsAuthenticated)
                    {
                        <div class="col-12">
                            <span class="text-dark font-weight-bold">@currentUser.Name</span>
                        </div>
                        <div class="col-12 my-3">
                            <textarea class="form-control" rows="5" id="commentContent"></textarea>
                        </div>
                        <div class="text-right col-lg-12">
                            <a class="btn btn-primary text-white" id="commentSave">저장</a>
                        </div>
                    }
                    else
                    {
                        <div class="col-lg-12 text-center align-self-center" style="height:100px;">
                            <p class="text-dark">댓글을 작성하시려면 로그인이 필요합니다.</p> @*박스 중앙으로*@
                        </div>
                    }
                </div>
            </div>
        </div>
        <div class="row px-5 mb-3 align-items-center">
            <div class="center-block">
                @* 이전글 다음글 구현*@
                <ul class="pagination mt-3">
                    @{
                        var prevDisabled = Model.PrevBNo == 0 ? "disabled" : "";
                        var nextDisabled = Model.NextBNo == 0 ? "disabled" : "";
                    }
                    <li class="page-item @prevDisabled">
                        <a class="page-link" tabindex="-1" asp-action="Detail" asp-controller="Board" asp-route-BNo="@Model.PrevBNo"
                           asp-route-currentPage="@ViewBag.CurrentPage" asp-route-searchType="@ViewBag.SearchType" asp-route-searchString="@ViewBag.SearchString">이전글</a>
                    </li>
                    <li class="page-item @nextDisabled">
                        <a class="page-link" asp-action="Detail" asp-controller="Board" asp-route-BNo="@Model.NextBNo"
                           asp-route-currentPage="@ViewBag.CurrentPage" asp-route-searchType="@ViewBag.SearchType" asp-route-searchString="@ViewBag.SearchString">다음글</a>
                    </li>
                </ul>
            </div>
            <div class="text-right d-inline-block ">
                @if (User.Identity.IsAuthenticated && (Model.Data.UNo == User.Identity.GetSid()))
                {
                    <a class="btn btn-success" asp-controller="Board" asp-action="Edit" asp-route-BNo="@Model.Data.BNo">수정</a>
                    <button type="button" class="btn btn-danger" data-toggle="modal" data-target="#modalDel">삭제</button>
                }
                <a class="btn btn-primary" asp-controller="Board" asp-action="Index"
                   asp-route-currentPage="@ViewBag.CurrentPage" asp-route-searchType="@ViewBag.SearchType" asp-route-searchString="@ViewBag.SearchString" asp-route-Id="@ViewBag.Category.Id">목록</a>
            </div>
            <input type="button" class="d-none" id="execute" value="실행" />
            <input type="button" class="d-none" id="stop" value="중지" />
        </div>
    </div>
</div>


<div id="modalDel" class="modal fade" tabindex="-1" role="dialog"
     aria-labelledby="danger-header-modalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header modal-colored-header bg-danger">
                <h4 class="modal-title" id="danger-header-modalLabel">삭제</h4>
                <button type="button" class="close" data-dismiss="modal"
                        aria-hidden="true">
                    ×
                </button>
            </div>
            <div class="modal-body">
                <p>
                    게시글을 삭제하시겠습니까?
                </p>
            </div>
            <div class="modal-footer">
                <a class="btn btn-danger" asp-controller="Board" asp-action="Delete" asp-route-BNo="@Model.Data.BNo">삭제</a>
                <button type="button" class="btn btn-light"
                        data-dismiss="modal">
                    취소
                </button>
            </div>
        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div><!-- /.modal -->
